Components of Chess:
  - 8x8 board (64 squares)
  - 32 pieces (black/white):
    - 16 pieces per player:
      - 8 pawns
      - 2 knights
      - 2 bishops
      - 2 rooks
      - 1 queen
      - 1 knight
  - 2 players
  - Save feature
  - Resign feature
  - Draw feature

Classes to make:
  - Board
  - Player
  - Piece
    - King
    - Queen
    - Rooks
    - Bishops
    - Knights
    - Pawns
  - Game

class Board
  @cells = create
    #create
      variable of hash
      generate an 8x8 hash, a-h, then in each square, another hash with :piece ' . ' and :player nil
      return hash

  @chessboard = #assemble
    #assemble
      in @cells, iterate through the hash row 2 a-h and row 7 a-h, insert pawns and player
      manually insert other pieces
        looks like { e2: { piece: 'pawn', type: 'white' }}
      return the cells
    
  #game_over?
  
  should know coordinates,
  should know pieces
  #checked?
  #checkmate?


class Piece
  should know its symbol, notation
  should know to move and its captures
  King
    - symbol: ♔ ♚
    - notation: K	
    - move:
        from [2, 2]
          (start down)
          [2, 1] 0, -1 (down)
          [3, 1] 1, -1 (down-right)
          [3, 2] 1, 0 (right)
          [3, 3] 1, 1 (up-right)
          [2, 3] 0, 1 (up)
          [1, 3] -1, 1 (up-left)
          [1, 2] -1, 0 (left)
          [1, 1] -1, -1 (down-left)
    
    #checked? or maybe @checked = false
    #checkmated? or maybe @checkmated = false
      come back to these later to ensure
    #castle
      king hasnt moved
      king is not checked
      the rook on which side to castle has not moved
      king will not cross over a check
      cells between king and rook must be empty
    
    movement:
      step by step DnQ
        determine how the king moves normally
        when an enemy piece moves to a square and directly checks the king, find pieces to block or squares for king to move
          - configure the pieces' moves to check for a king in every square they can pass through
          - pass a checked method to game, setting the next player as the value
          - 

          if the king is checked and has no legal moves without checks/blocks, declare checkmate
          if the king is not checked has player has no legal moves, declare stalemate
          consider edge cases:
            pinned ally pieces
            discovered checks
        
        castling:
          The king that makes the castling move has not yet moved in the game.
          The rook that makes the castling move has not yet moved in the game.
          The king is not in check.
          The king does not move over a square that is attacked by an enemy piece during the castling move, i.e., when castling, there may not be an enemy piece that can move (in case of pawns: by diagonal movement) to a square that is moved over by the king.
          The king does not move to a square that is attacked by an enemy piece during the castling move, i.e., you may not castle and end the move with the king in check.
          All squares between the rook and king before the castling move are empty.
          The King and rook must occupy the same rank (or row).

  
  Queen
    - symbol: ♕ ♛
    - notation: Q
    - move:
        0, -1 
        1, -1
        1, 0
        1, 1
        0, 1
        -1, 1
        -1, 0
        -1, -1
        but can go further, just only within these directions
  
  Rooks
    - symbol: ♖ ♜
    - notation: R
    - move: 
        from [2, 2]
          (start down)
          [2, 1] 0, -1 (down)
          [3, 2] 1, 0 (right)
          [2, 3] 0, 1 (up)
          [1, 2] -1, 0 (left)
          but can go further, just only within these directions
  
  Bishops
    - symbol: ♗ ♝
    - notation: B
    - move:
        from [2, 2]
          (start down-left)
          [3, 1] 1, -1 (down-right)
          [3, 3] 1, 1 (up-right)
          [1, 3] -1, 1 (up-left)
          [1, 1] -1, -1 (down-left)
          but can go further, just only within these directions
        
        make a hash of directions
        return possible_moves if coordinate cannot be found
        convert dest (coordinate) to position
        take the key from hash if the position matches the value if it's positive/negative
          ex: if position[0] is negative and position[1] is positive, the key is up-left
        take self's position
        add/subtract self's position x and y until it reaches the dest
          if chessboard.find_piece_by_coordinate(coordinate).nil?
            possible_moves << coordinate
          elsif chessboard.find_piece_by_coordinate(coordinate).color != color
            possible_moves << coordinate
          end

  Knights:
    - symbol: ♘ ♞
    - notation: N
    - move:
        2, 1
        2, -1
        1, 2
        1, -2
        -2, 1
        -2, -1
        -1, 2
        -1, -2

  Pawns:
    - symbol: ♙ ♟
    - notation: n/a or P
    - move:
        from [2, 2]
          (start up)
          [2, 3] 0, 1 (up)
          [2, 4] 0, 2
          once it has moved, only 0, 1 can be done
    #moved? or @moved = false
    #promote
      into queen, rook, knight, bishop
    #en_passant_state
    #can_move_to?(dest)


class Player
  @name
  @color
  select_move


class Game
  @board = board class
  @player1, @player2
  @current_turn
  game_over
  switch_turn
  conclusion
  valid_move



Step by step plan which features to create in order:
  1. Create the board
  2. Assemble the pieces in the created board
  3. Give the pieces ability to move
    - King
    - Queen
    - Rooks
    - Bishops
    - Knights
    - Pawns
  4. Make an array of possible moves by black/white for a king's checklist of checks, 
     thus preventing the king from moving on those squares
  5. Add resign, draw, or save options
  6. Ask player of their from-to move, e.g. e2e4
      - Slice this string "e2e4".slice(1, 2) to get the 'from'
        then "e2e4".slice(2, 3) to get the 'to'
      - Verify these if from & to exists in the hash board
      - Fetch the object (piece) on 'from', pass the from-to to its move method
        - Validate the piece's move, returning true or false
        - If true, move the piece towards that square, and delete the source
        - If false, ask again
        In game.rb
        #move_piece
          
      - The move method will return a sequence of moves that 
        reaches to that 'to' square e.g. e2e4 => [[4, 3], [4, 4]] (start from 0)
      - Convert get the x/col of each move[0] (4) then add to 'a'.ord (97) then #chr to get character
        formula is file = ('a'.ord + move[0]).chr which is 'e'
      - Concatenate the result to y/row of each move[1] (3 and 4) which is the rank
        which goes notation = file << rank which is 'e3' and 'e4'
      - For each notation, verify if there are pieces in the way. Rules will be different for each piece.
        - Example: Pawn
          - If there are any kind of piece in e4, then the move is invalid
          For queens, rooks, bishops
          - If there are pieces before they reach the dest,
            the move is invalid.
          - If there are enemy pieces on the dest, replace that notation with the piece.
          For knights,
          - If there are allied pieces before they react the dest,
            the move is invalid.
          For kings,
          - If there are allied pieces before they react the dest,
            the move is invalid.
          - If the next move does not lead to checking itself,
            the move is valid.
      - The game will have a list of 'checked' squares. It has two processes:
        1. Every move attempted will scan which squares are attacked so the
            king cannot cross. Remove unattacked squares and insert new attacked squares.
        2. Then before printing the board, which means it is the next turn,
            rescan the enemies' current position, scan if there are new squares that their
            pieces see, so we can prevent pinned pieces from moving.
        3. If everything's valid, print the board. Next turn.  


Game flow in CLI:
  1. Prints the board with 8-1 at left side and A-H at bottom side.
  2. Displays the current player
  3. Provide instructions:
    - To move, type the current coordinate to desired coordinate with hyphen e.g. "e2-e4"
    - To save, type "save"
    - To load the previous saved file, type "load"
    - To resign, type "resign" and the current player loses, display the next player as winner
    - To ask for draw, type "draw?", display a message for the next player to type "accept" or "decline"
    - To castle short side, type "O-O", and for long side, "O-O-O"
  4. If a player wins, display the winner message and end the game.




~~~~
Piece movement
  Say a rook from h1 wants to go h4
    h1h4
    source: 8, 1 dest: 8, 4
    (very inefficient)
    Iterate through the array
    if source[x] == dest[x] && source[y] != dest[y] # means either up or down
      if source[y] > dest[y] # means going down
        return [0, -1] # not final
      elsif source[y] < dest[y] # means going up
        return [0, 1]
      end # if it's equal, find a way to invalidate
    elsif source[x] != dest[x] && source[y] == dest[y] # means either left or right 
      if source[x] > dest[x] # means going left
        return [-1, 0]
      elsif source[x] < dest[x] # means going right
        return [1, 0]
      end # if it's equal, find a way to invalidate
    end # opportunity to use ternaries
        # if both are equal, find a way to invalidate

  Pawn from e2 to e4
    e2e4
    establish possible_moves list or array 
    # get the number (rank) from coordinate
    # rank = current_coordinate.delete('^0-9').to_i
    file = current_coordinate.slice(0)
    rank = current_coordinate.slice(1).to_i
    if d3 or f3 is not nil and piece is :black
      add to possible_moves

    if moved == false
      add to possible_moves if file + (rank += 1) is nil
      add to possible_moves if file + (rank += 2) is nil
    elsif moved == true
      add to possible_moves if file + (rank += 1) is nil


      

~~~~~~
Flowchart for moving piece:
                                false
      -------------------------------------------------------------
      |                                                           |
      |         false                                             |
      |   ---------------------                                   |
      v   v                   |                      true         |
Ask for move -> Validate if from-to coordinates exist -> Validate if 'from' can move 'to'
                                                          Considerations:
                                                            Pinned
                                                            Blocked by same colored piece
                                                            Specific rules of pieces
                                                              Opposing piece is protected, king cannot capture

                                                                  |
                                                                  v
                                                        Move the piece
                                                                |
                                                                v
                                                        If it is a pawn's first move, set @moved
                                                        to true 
                                                                |
                                                                v
                                                        Set the opponent king to check if its checked
                                                    
Notes for later:
  1. Using #moved attribute for Pawn might be a trouble. For example, when
     loading the game through FEN, how would the game know that these pieces have moved?
     They may be able to move 2 steps even after moving already.
     My solution for now is instead of relying on move method, check for the Pawn's rank
     position. If it's white, check 2nd, otherwise 7th. They won't go backwards, so
     if the pawn is out of the rank, then they have moved.
  2. Refactor methods:
    2.1 #move in main.rb. Consider writing a move parser for user's text instead of
        manually parsing the move everytime. Also consider renaming it.
    2.2 validation of move in #move is long. Extract it.
    2.3 Game#legal_squares_of_color and Game#covered_squares_of_color belong to Chessboard
    2.4 Game#valid_coordinate? can also belong to Chessboard 
    2.5 Piece has #castle, which should only belong to ::King
    2.6 Refer to josh's suggestion for refactoring Piece subclasses (MOVE_OPTIONS constant thing)
    2.7 Refer to josh's suggestion for refactoring Chessboard. I've thought of BoardAnalyzer class
        to reduce overreliance on chessboard parameter. For example, issue with FEN for adding
        castling availability is I keep calling the same method over and over using the same
        parameter. What I can envision here is create a BoardAnalyzer object, (tentative,
        my idea doesn't make  sense yet)
    2.8 Making a constant of CASTLING_ROOK_COORDINATE in Piece seems out of place.
    2.9 Piece#Pawn move and capture logic could do some refactoring too.